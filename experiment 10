#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#define MSG_SIZE 256

// Structure for the message
struct message {
    long msg_type;
    char msg_text[MSG_SIZE];
};

int main() {
    int msgid;
    key_t key;
    struct message msg;

    // Generate a unique key
    key = ftok(".", 'a');
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create or access the message queue
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    // Determine if it's the sender or receiver
    char role[10];
    printf("Enter 'sender' or 'receiver': ");
    scanf("%s", role);

    if (strcmp(role, "sender") == 0) {
        // Sender process
        msg.msg_type = 1; 
        printf("Enter message to send: ");
        getchar(); // Consume newline
        fgets(msg.msg_text, MSG_SIZE, stdin);
        msg.msg_text[strcspn(msg.msg_text, "\n")] = 0; // Remove trailing newline

        // Send the message
        if (msgsnd(msgid, &msg, sizeof(msg), 0) == -1) {
            perror("msgsnd");
            exit(1);
        }
        printf("Message sent: %s\n", msg.msg_text);
    } else if (strcmp(role, "receiver") == 0) {
        // Receiver process
        // Receive the message
        if (msgrcv(msgid, &msg, sizeof(msg), 1, 0) == -1) {
            perror("msgrcv");
            exit(1);
        }
        printf("Message received: %s\n", msg.msg_text);

        // Remove the message queue
        if (msgctl(msgid, IPC_RMID, NULL) == -1) {
            perror("msgctl");
            exit(1);
        }
    } else {
        printf("Invalid role entered.\n");
    }

    return 0;
}
