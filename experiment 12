#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define LEFT (philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS
#define RIGHT (philosopher_id + 1) % NUM_PHILOSOPHERS

pthread_mutex_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

void think(int philosopher_id) {
    printf("Philosopher %d is thinking\n", philosopher_id);
    sleep(1);
}

void eat(int philosopher_id) {
    printf("Philosopher %d is eating\n", philosopher_id);
    sleep(1);
}

void take_forks(int philosopher_id) {
    pthread_mutex_lock(&forks[LEFT]);
    printf("Philosopher %d picked up left fork\n", philosopher_id);
    pthread_mutex_lock(&forks[RIGHT]);
    printf("Philosopher %d picked up right fork\n", philosopher_id);
}

void put_forks(int philosopher_id) {
    pthread_mutex_unlock(&forks[LEFT]);
    printf("Philosopher %d put down left fork\n", philosopher_id);
    pthread_mutex_unlock(&forks[RIGHT]);
    printf("Philosopher %d put down right fork\n", philosopher_id);
}

void* philosopher(void* arg) {
    int philosopher_id = *(int*)arg;
    while (1) {
        think(philosopher_id);
        take_forks(philosopher_id);
        eat(philosopher_id);
        put_forks(philosopher_id);
    }
    return NULL;
}

int main() {
    int i;
    int philosopher_ids[NUM_PHILOSOPHERS];

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for (i = 0; i < NUM_PHILosOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }
    return 0;
}
