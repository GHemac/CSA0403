#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

int blocks[MAX_BLOCKS];
int processes[MAX_PROCESSES];
int allocation[MAX_PROCESSES];
int num_blocks, num_processes;

void worstFit() {
    for (int i = 0; i < num_processes; i++) {
        int worst_index = -1;
        for (int j = 0; j < num_blocks; j++) {
            if (blocks[j] >= processes[i]) {
                if (worst_index == -1 || blocks[j] > blocks[worst_index]) {
                    worst_index = j;
                }
            }
        }
        if (worst_index != -1) {
            allocation[i] = worst_index;
            blocks[worst_index] -= processes[i];
        } else {
            allocation[i] = -1; 
        }
    }
}

int main() {
    printf("Enter the number of memory blocks: ");
    scanf("%d", &num_blocks);
    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < num_blocks; i++) {
        scanf("%d", &blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);
    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < num_processes; i++) {
        scanf("%d", &processes[i]);
        allocation[i] = -1;
    }

    worstFit();

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < num_processes; i++) {
        printf("%d\t\t%d\t\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }

    return 0;
}
