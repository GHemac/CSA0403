#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

int blocks[MAX_BLOCKS];
int processes[MAX_PROCESSES];
int allocation[MAX_PROCESSES];
int num_blocks;
int num_processes;

void get_input() {
    int i;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &num_blocks);

    printf("Enter the size of each block:\n");
    for (i = 0; i < num_blocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    printf("Enter the size of each process:\n");
    for (i = 0; i < num_processes; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i]);
    }
}

void best_fit() {
    int i, j;

    for (i = 0; i < num_processes; i++) {
        allocation[i] = -1; 
        int best_index = -1;
        int min_waste = 100000;

        for (j = 0; j < num_blocks; j++) {
            if (blocks[j] >= processes[i]) {
                int waste = blocks[j] - processes[i];
                if (waste < min_waste) {
                    min_waste = waste;
                    best_index = j;
                }
            }
        }

        if (best_index != -1) {
            allocation[i] = best_index;
            blocks[best_index] -= processes[i];
        }
    }
}

void display_allocation() {
    int i;

    printf("\nProcess\tSize\tBlock Allocated\n");
    for (i = 0; i < num_processes; i++) {
        printf("%d\t%d\t", i + 1, processes[i]);
        if (allocation[i] != -1) {
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    get_input();
    best_fit();
    display_allocation();
    return 0;
}
