#include <stdio.h>
#include <stdlib.h>

// Function to simulate FIFO page replacement
void fifoPageReplacement(int pages[], int num_pages, int frame_size) {
    int frames[frame_size]; // Array to represent frames
    int frame_queue[frame_size]; // Queue to track frame order
    int frame_count = 0; // Counter for frames
    int page_faults = 0; // Counter for page faults
    int frame_index = 0; // Index for frame insertion

    // Initialize frames with -1 indicating empty
    for (int i = 0; i < frame_size; i++) {
        frames[i] = -1;
        frame_queue[i] = -1;
    }

    printf("Page\tFrames\n");
    for (int i = 0; i < num_pages; i++) {
        int current_page = pages[i];
        int page_found = 0;

        // Check if page is already in frames
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] == current_page) {
                page_found = 1;
                break;
            }
        }

        // If page is not in frames, handle the page fault
        if (!page_found) {
            page_faults++;

            // If frames are not full, add the page
            if (frame_count < frame_size) {
                frames[frame_index] = current_page;
                frame_queue[frame_index] = current_page;
                frame_index = (frame_index + 1) % frame_size;
                frame_count++;
            } else { // If frames are full, replace the oldest page
                int oldest_page = frame_queue[0];
                for (int j = 0; j < frame_size; j++) {
                    if (frames[j] == oldest_page) {
                        frames[j] = current_page;
                        break;
                    }
                }
                // Update the queue
                for (int j = 0; j < frame_size - 1; j++) {
                  frame_queue[j] = frame_queue[j + 1];
                }
                frame_queue[frame_size - 1] = current_page;
            }
        }

        // Print the current state of frames
        printf("%d\t", current_page);
        for (int j = 0; j < frame_size; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            } else {
                printf("- ");
            }
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
}

int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3, 1};
    int num_pages = sizeof(pages) / sizeof(pages[0]);
    int frame_size = 3; // Number of frames

    fifoPageReplacement(pages, num_pages, frame_size);

    return 0;
}
