#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_RECORD_SIZE 100  // Adjust as needed
#define MAX_RECORDS 100      // Adjust as needed

typedef struct {
    char data[MAX_RECORD_SIZE];
} Record;

int main() {
    Record file[MAX_RECORDS];
    int num_records = 0;
    char buffer[MAX_RECORD_SIZE];
    int choice;

    while (1) {
        printf("\nSequential File Allocation Simulation\n");
        printf("1. Create/Append a Record\n");
        printf("2. Read the File\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                if (num_records >= MAX_RECORDS) {
                    printf("File is full!\n");
                    break;
                }
                printf("Enter data for record %d: ", num_records + 1);
                scanf(" %[^\n]s", buffer);  // Read entire line

                // Check for newline character and remove it
                int len = strlen(buffer);
                if (len > 0 && buffer[len - 1] == '\n') {
                    buffer[len - 1] = '\0';
                }

                strncpy(file[num_records].data, buffer, MAX_RECORD_SIZE - 1);
                file[num_records].data[MAX_RECORD_SIZE - 1] = '\0'; // Null-terminate
                num_records++;
                printf("Record added successfully!\n");
                break;

            case 2:
                if (num_records == 0) {
                    printf("File is empty!\n");
                    break;
                }

                printf("Reading the file:\n");
                for (int i = 0; i < num_records; i++) {
                    printf("Record %d: %s\n", i + 1, file[i].data);
                }
                break;

            case 3:
                printf("Exiting...\n");
                return 0;

            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}
