#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Function to sort the request array in ascending order
void sortRequests(int requests[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (requests[j] > requests[j + 1]) {
                int temp = requests[j];
                requests[j] = requests[j + 1];
                requests[j + 1] = temp;
            }
        }
    }
}

// Function to calculate the absolute difference between two numbers
int absDiff(int a, int b) {
    return abs(a - b);
}

// Function to simulate C-SCAN disk scheduling
void cscanDiskScheduling(int requests[], int n, int head, int diskSize) {
    int seekCount = 0;
    int currentHead = head;

    sortRequests(requests, n);

    // Find the index of the first request greater than or equal to the head
    int startIndex = 0;
    while (startIndex < n && requests[startIndex] < head) {
        startIndex++;
    }

    // Move the head to the right until the end of the disk
    for (int i = startIndex; i < n; i++) {
        seekCount += absDiff(currentHead, requests[i]);
        currentHead = requests[i];
    }

    // Move the head to the end of the disk
    seekCount += absDiff(currentHead, diskSize - 1);
    currentHead = diskSize - 1;

    // Move the head to the beginning of the disk without servicing any requests
    seekCount += absDiff(currentHead, 0);
    currentHead = 0;

    // Move the head from the beginning of the disk
    for (int i = 0; i < startIndex; i++) {
        seekCount += absDiff(currentHead, requests[i]);
        currentHead = requests[i];
    }

    printf("Total seek count: %d\n", seekCount);
}

int main() {
    int requests[] = {176, 79, 34, 60, 92, 11, 41, 114};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head = 50;
    int diskSize = 200;

    cscanDiskScheduling(requests, n, head, diskSize);

    return 0;
}
